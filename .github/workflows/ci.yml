name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/**'
      - 'terraform/**'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: "1.5.7"

jobs:
  get-terraform-outputs:
    runs-on: ubuntu-latest
    outputs:
      ecr_frontend: ${{ steps.construct-urls.outputs.frontend_url }}
      ecr_backend: ${{ steps.construct-urls.outputs.backend_url }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Account ID and Construct ECR URLs
        id: construct-urls
        run: |
          # Get AWS account ID directly from credentials
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text || echo "000000000000")
          
          # Construct default ECR URLs
          FRONTEND_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-frontend"
          BACKEND_URL="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CLUSTER_NAME}-backend"
          
          # Try to get from Terraform state if it exists
          cd terraform
          if [ -f ".terraform/terraform.tfstate" ] && terraform init -backend=false >/dev/null 2>&1; then
            TF_FRONTEND=$(terraform output -raw ecr_frontend_repository_url 2>/dev/null)
            TF_BACKEND=$(terraform output -raw ecr_backend_repository_url 2>/dev/null)
            
            # Use Terraform outputs if they exist
            if [ ! -z "$TF_FRONTEND" ] && [ ! -z "$TF_BACKEND" ]; then
              FRONTEND_URL=$TF_FRONTEND
              BACKEND_URL=$TF_BACKEND
            fi
          fi
          
          echo "frontend_url=${FRONTEND_URL}" >> $GITHUB_OUTPUT
          echo "backend_url=${BACKEND_URL}" >> $GITHUB_OUTPUT
        env:
          CLUSTER_NAME: lab-eks-cluster
          AWS_REGION: ${{ env.AWS_REGION }}

  version:
    needs: get-terraform-outputs
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.semver.outputs.app_version }}
      infra_version: ${{ steps.semver.outputs.infra_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}  # Use PAT instead of default token

      - name: Determine Versions
        id: semver
        run: |
          # Initialize versions with defaults
          APP_VERSION="0.0.1"
          INFRA_VERSION="0.0.1"
          
          # Try to get versions from file
          if [[ -f versions.json ]]; then
            FILE_APP_VERSION=$(jq -r .app_version versions.json)
            FILE_INFRA_VERSION=$(jq -r .infra_version versions.json)
            
            # Use file versions if valid
            [[ "$FILE_APP_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && APP_VERSION=$FILE_APP_VERSION
            [[ "$FILE_INFRA_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && INFRA_VERSION=$FILE_INFRA_VERSION
          fi
          
          # Update versions based on changes
          APP_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^(app/|helm/)" || true)
          INFRA_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^(terraform/|docker/)" || true)
          
          [[ ! -z "$APP_CHANGES" ]] && APP_VERSION=$(echo $APP_VERSION | awk -F. '{$NF+=1; print $0}' OFS=.)
          [[ ! -z "$INFRA_CHANGES" ]] && INFRA_VERSION=$(echo $INFRA_VERSION | awk -F. '{$NF+=1; print $0}' OFS=.)
          
          # Output versions
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "infra_version=$INFRA_VERSION" >> $GITHUB_OUTPUT
          
          # Update versions file
          echo "{\"app_version\":\"$APP_VERSION\",\"infra_version\":\"$INFRA_VERSION\"}" > versions.json
          
          # Commit changes if needed
          if ! git diff --quiet versions.json; then
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add versions.json
            git commit -m "chore: update versions [skip ci]"
            git push
          fi

  build-terraform-runner:
    needs: version
    if: contains(github.event.head_commit.modified, 'docker/Terraform.dockerfile')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Terraform runner
        run: |
          RUNNER_TAG=${{ needs.version.outputs.infra_version }}
          docker build -t terraform-runner:${RUNNER_TAG} \
            --build-arg TERRAFORM_VERSION=${TERRAFORM_VERSION} \
            -f docker/Terraform.dockerfile .
          docker tag terraform-runner:${RUNNER_TAG} terraform-runner:latest
          # Push to ECR if needed

  build-app:
    needs: [version, get-terraform-outputs]
    if: contains(github.event.head_commit.modified, 'app/') || contains(github.event.head_commit.modified, 'helm/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images
        env:
          VERSION: ${{ needs.version.outputs.app_version }}
          ECR_FRONTEND: ${{ needs.get-terraform-outputs.outputs.ecr_frontend }}
          ECR_BACKEND: ${{ needs.get-terraform-outputs.outputs.ecr_backend }}
        run: |
          docker build -t $ECR_FRONTEND:$VERSION -t $ECR_FRONTEND:latest ./app/frontend
          docker push $ECR_FRONTEND:$VERSION
          docker push $ECR_FRONTEND:latest

          docker build -t $ECR_BACKEND:$VERSION -t $ECR_BACKEND:latest ./app/backend
          docker push $ECR_BACKEND:$VERSION
          docker push $ECR_BACKEND:latest

      - name: Update Helm values
        run: |
          VERSION=${{ needs.version.outputs.app_version }}
          sed -i "s/tag:.*/tag: ${VERSION}/" helm/lab-app/values.yaml
          git add helm/lab-app/values.yaml
          git commit -m "chore: update app version [skip ci]"
          git push
