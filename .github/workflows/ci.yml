name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'helm/**'
      - 'docker/**'
      - '.github/workflows/**'
      - 'terraform/**'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: "1.5.7"

jobs:
  get-terraform-outputs:
    runs-on: ubuntu-latest
    outputs:
      ecr_frontend: ${{ steps.tf-outputs.outputs.ecr_frontend }}
      ecr_backend: ${{ steps.tf-outputs.outputs.ecr_backend }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          terraform init
          echo "ecr_frontend=$(terraform output -raw ecr_frontend_repository_url)" >> $GITHUB_OUTPUT
          echo "ecr_backend=$(terraform output -raw ecr_backend_repository_url)" >> $GITHUB_OUTPUT

  version:
    needs: get-terraform-outputs
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.semver.outputs.app_version }}
      infra_version: ${{ steps.semver.outputs.infra_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Versions
        id: semver
        run: |
          # Get latest versions from versions.json if exists
          if [[ -f versions.json ]]; then
            APP_VERSION=$(jq -r .app_version versions.json)
            INFRA_VERSION=$(jq -r .infra_version versions.json)
          else
            APP_VERSION="0.0.0"
            INFRA_VERSION="0.0.0"
          fi

          # Detect changes
          APP_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^(app/|helm/)")
          INFRA_CHANGES=$(git diff --name-only HEAD^ HEAD | grep -E "^(terraform/|docker/)")
          
          if [[ ! -z "$APP_CHANGES" ]]; then
            APP_VERSION=$(echo $APP_VERSION | awk -F. '{$NF+=1; print $0}' OFS=.)
          fi
          
          if [[ ! -z "$INFRA_CHANGES" ]]; then
            INFRA_VERSION=$(echo $INFRA_VERSION | awk -F. '{$NF+=1; print $0}' OFS=.)
          fi
          
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "infra_version=$INFRA_VERSION" >> $GITHUB_OUTPUT

          # Update versions file
          echo "{\"app_version\":\"$APP_VERSION\",\"infra_version\":\"$INFRA_VERSION\"}" > versions.json
          
          if [[ ! -z "$APP_CHANGES" ]] || [[ ! -z "$INFRA_CHANGES" ]]; then
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            git add versions.json
            git commit -m "chore: update versions [skip ci]"
            git push

  build-terraform-runner:
    needs: version
    if: contains(github.event.head_commit.modified, 'docker/Terraform.dockerfile')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Terraform runner
        run: |
          RUNNER_TAG=${{ needs.version.outputs.infra_version }}
          docker build -t terraform-runner:${RUNNER_TAG} \
            --build-arg TERRAFORM_VERSION=${TERRAFORM_VERSION} \
            -f docker/Terraform.dockerfile .
          docker tag terraform-runner:${RUNNER_TAG} terraform-runner:latest
          # Push to ECR if needed

  build-app:
    needs: [version, get-terraform-outputs]
    if: contains(github.event.head_commit.modified, 'app/') || contains(github.event.head_commit.modified, 'helm/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images
        env:
          VERSION: ${{ needs.version.outputs.app_version }}
          ECR_FRONTEND: ${{ needs.get-terraform-outputs.outputs.ecr_frontend }}
          ECR_BACKEND: ${{ needs.get-terraform-outputs.outputs.ecr_backend }}
        run: |
          docker build -t $ECR_FRONTEND:$VERSION -t $ECR_FRONTEND:latest ./app/frontend
          docker push $ECR_FRONTEND:$VERSION
          docker push $ECR_FRONTEND:latest

          docker build -t $ECR_BACKEND:$VERSION -t $ECR_BACKEND:latest ./app/backend
          docker push $ECR_BACKEND:$VERSION
          docker push $ECR_BACKEND:latest

      - name: Update Helm values
        run: |
          VERSION=${{ needs.version.outputs.app_version }}
          sed -i "s/tag:.*/tag: ${VERSION}/" helm/lab-app/values.yaml
          git add helm/lab-app/values.yaml
          git commit -m "chore: update app version [skip ci]"
          git push
