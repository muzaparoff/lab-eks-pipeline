name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'helm/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-east-1
  ECR_FRONTEND: ${{ secrets.ECR_FRONTEND_URL }}
  ECR_BACKEND: ${{ secrets.ECR_BACKEND_URL }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.semver.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine Version
        id: semver
        run: |
          # Try to get the latest tag, if none exists set to 0.0.0
          LAST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          
          if [[ "$LAST_VERSION" == "0.0.0" ]]; then
            NEW_VERSION="0.0.1"
          else
            MSG=$(git log -1 --pretty=%B)
            if [[ "$MSG" == ver:* ]]; then
              NEW_VERSION=$(echo $LAST_VERSION | awk -F. '{print $1"."$2+1".0"}')
            elif [[ "$MSG" == feat:* ]]; then
              NEW_VERSION=$(echo $LAST_VERSION | awk -F. '{print $1"."$2+1".0"}')
            elif [[ "$MSG" == fix:* ]]; then
              NEW_VERSION=$(echo $LAST_VERSION | awk -F. '{$NF+=1; print $0}' OFS=.)
            else
              NEW_VERSION=$LAST_VERSION
            fi
          fi
          
          echo "Determined version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images
        env:
          VERSION: ${{ needs.version.outputs.new_version }}
        run: |
          # Build and push frontend
          docker build -t $ECR_FRONTEND:$VERSION -t $ECR_FRONTEND:latest ./app/frontend
          docker push $ECR_FRONTEND:$VERSION
          docker push $ECR_FRONTEND:latest

          # Build and push backend
          docker build -t $ECR_BACKEND:$VERSION -t $ECR_BACKEND:latest ./app/backend
          docker push $ECR_BACKEND:$VERSION
          docker push $ECR_BACKEND:latest

      - name: Update Helm chart
        if: needs.version.outputs.new_version != ''
        run: |
          VERSION=${{ needs.version.outputs.new_version }}
          sed -i "s/tag:.*/tag: ${VERSION}/" helm/lab-app/values.yaml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add helm/lab-app/values.yaml
          git commit -m "Update image version to ${VERSION}"
          git push
          git tag $VERSION
          git push --tags
