name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_certificate_body: ${{ secrets.GH_CERT_BODY }}
  TF_VAR_certificate_key: ${{ secrets.GH_CERT_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v3

      - name: Validate Certificate Variables
        run: |
          if [[ -z "${TF_VAR_certificate_body}" ]] || [[ -z "${TF_VAR_certificate_key}" ]]; then
            echo "Error: Certificate variables are not set"
            exit 1
          fi
          
          if echo "${TF_VAR_certificate_body}" | base64 -d > /dev/null 2>&1; then
            echo "Certificate body is valid base64"
          else
            echo "Error: Certificate body is not valid base64"
            exit 1
          fi
          
          if echo "${TF_VAR_certificate_key}" | base64 -d > /dev/null 2>&1; then
            echo "Certificate key is valid base64"
          else
            echo "Error: Certificate key is not valid base64"
            exit 1
          fi
          
          CERT_CONTENT=$(echo "${TF_VAR_certificate_body}" | base64 -d)
          if ! echo "$CERT_CONTENT" | grep -q "BEGIN CERTIFICATE" || ! echo "$CERT_CONTENT" | grep -q "END CERTIFICATE"; then
            echo "Error: Invalid certificate format"
            exit 1
          fi
          
          KEY_CONTENT=$(echo "${TF_VAR_certificate_key}" | base64 -d)
          if ! echo "$KEY_CONTENT" | grep -q "BEGIN PRIVATE KEY" || ! echo "$KEY_CONTENT" | grep -q "END PRIVATE KEY"; then
            echo "Error: Invalid private key format"
            exit 1
          fi

      - name: Load versions
        id: versions
        run: |
          VERSION_FILE="versions.json"
          if [[ -f "$VERSION_FILE" ]]; then
            echo "infra_version=$(jq -r .infra_version $VERSION_FILE)" >> $GITHUB_OUTPUT
            echo "app_version=$(jq -r .app_version $VERSION_FILE)" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup Resources
        run: |
          # Attempt to delete ALB controller without failing
          echo "Cleaning up ALB controller..."
          kubectl delete deployment -n kube-system aws-load-balancer-controller --ignore-not-found=true || true
          
          # Attempt to delete ACM certificate without failing
          echo "Cleaning up ACM certificate..."
          CERT_ARN=$(aws acm list-certificates --query 'CertificateSummaryList[?DomainName==`app.labinternal.example.com`].CertificateArn' --output text || true)
          if [ ! -z "$CERT_ARN" ]; then
            aws acm delete-certificate --certificate-arn $CERT_ARN || true
          fi
          
          echo "Cleanup completed"

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Terraform with Docker
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_certificate_body: ${{ secrets.GH_CERT_BODY }}
          TF_VAR_certificate_key: ${{ secrets.GH_CERT_KEY }}
        run: |
          cd terraform
          # First initialize with reconfigure flag
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            muzaparoff/terraform-runner:latest \
            init -reconfigure

          # Then run plan or apply/destroy
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e TF_VAR_db_password=$TF_VAR_db_password \
            -e TF_VAR_certificate_body=$TF_VAR_certificate_body \
            -e TF_VAR_certificate_key=$TF_VAR_certificate_key \
            muzaparoff/terraform-runner:latest \
            ${{ github.event.inputs.action == 'destroy' && 'destroy -auto-approve' || 'apply -auto-approve' }}

  get-terraform-outputs:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    outputs:
      cluster_name: ${{ steps.tf-outputs.outputs.cluster_name }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Initialize and get outputs with Docker
        id: tf-outputs
        working-directory: terraform
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            muzaparoff/terraform-runner:latest \
            init -reconfigure

          for i in {1..5}; do
            if docker run --rm \
              -v $(pwd):/workspace \
              -w /workspace \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e AWS_REGION=${{ env.AWS_REGION }} \
              muzaparoff/terraform-runner:latest \
              state pull > /dev/null 2>&1; then
              break
            fi
            echo "Waiting for state lock... attempt $i"
            sleep 10
          done

          CLUSTER_NAME=$(docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            muzaparoff/terraform-runner:latest \
            output -json eks_cluster_name 2>/dev/null | jq -r '.')
          if [ "$?" -eq 0 ] && [ ! -z "$CLUSTER_NAME" ]; then
            echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          else
            echo "Error: Failed to get cluster name from terraform output"
            exit 1
          fi

  deploy-application:
    needs: [deploy-infrastructure, get-terraform-outputs]
    if: ${{ github.event.inputs.action != 'destroy' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Git Setup
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Load versions
        id: versions
        run: |
          VERSION_FILE="versions.json"
          if [[ -f "$VERSION_FILE" ]]; then
            echo "app_version=$(jq -r .app_version $VERSION_FILE)" >> $GITHUB_OUTPUT
          fi

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Deploy with ArgoCD
        env:
          CLUSTER_NAME: ${{ needs.get-terraform-outputs.outputs.cluster_name }}
          APP_VERSION: ${{ needs.versions.outputs.app_version }}
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          
          cat k8s/argocd-app.yaml | sed "s/valueFiles:.*/valueFiles:\n      - values.yaml\n      - values-${APP_VERSION}.yaml/" | kubectl apply -f -
          
          echo "imageTag: ${APP_VERSION}" > helm/lab-app/values-${APP_VERSION}.yaml
          
          kubectl wait --for=condition=ready -n argocd application/lab-app --timeout=300s
