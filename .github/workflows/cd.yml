name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
  TF_VAR_certificate_body: ${{ secrets.GH_CERT_BODY }}
  TF_VAR_certificate_key: ${{ secrets.GH_CERT_KEY }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v3

      - name: Load versions
        id: versions
        run: |
          VERSION_FILE="versions.json"
          if [[ -f "$VERSION_FILE" ]]; then
            echo "infra_version=$(jq -r .infra_version $VERSION_FILE)" >> $GITHUB_OUTPUT
            echo "app_version=$(jq -r .app_version $VERSION_FILE)" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan/Apply/Destroy
        run: |
          cd terraform
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform destroy -auto-approve
          else
            terraform plan
            terraform apply -auto-approve
          fi

  get-terraform-outputs:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure  # Make sure infrastructure exists first
    outputs:
      cluster_name: ${{ steps.tf-outputs.outputs.cluster_name }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Initialize and get outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          # Initialize terraform with -reconfigure flag
          terraform init -reconfigure

          # Wait for potential locks to be released
          for i in {1..5}; do
            if terraform state pull > /dev/null 2>&1; then
              break
            fi
            echo "Waiting for state lock... attempt $i"
            sleep 10
          done

          # Get output with error handling
          CLUSTER_NAME=$(terraform output -json eks_cluster_name 2>/dev/null | jq -r '.')
          if [ "$?" -eq 0 ] && [ ! -z "$CLUSTER_NAME" ]; then
            echo "cluster_name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT
          else
            echo "Error: Failed to get cluster name from terraform output"
            exit 1
          fi

  deploy-application:
    needs: [deploy-infrastructure, get-terraform-outputs]
    if: ${{ github.event.inputs.action != 'destroy' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT_TOKEN }}  # Use PAT token instead of GITHUB_TOKEN

      - name: Git Setup
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Load versions
        id: versions
        run: |
          VERSION_FILE="versions.json"
          if [[ -f "$VERSION_FILE" ]]; then
            echo "app_version=$(jq -r .app_version $VERSION_FILE)" >> $GITHUB_OUTPUT
          fi

      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Deploy with ArgoCD
        env:
          CLUSTER_NAME: ${{ needs.get-terraform-outputs.outputs.cluster_name }}
          APP_VERSION: ${{ needs.versions.outputs.app_version }}
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
          
          # Apply ArgoCD application with dynamic version
          cat k8s/argocd-app.yaml | sed "s/valueFiles:.*/valueFiles:\n      - values.yaml\n      - values-${APP_VERSION}.yaml/" | kubectl apply -f -
          
          # Create version-specific values file
          echo "imageTag: ${APP_VERSION}" > helm/lab-app/values-${APP_VERSION}.yaml
          
          kubectl wait --for=condition=ready -n argocd application/lab-app --timeout=300s
